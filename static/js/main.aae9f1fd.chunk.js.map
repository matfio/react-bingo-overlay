{"version":3,"sources":["components/Overlay/BingoContext/index.js","components/Overlay/Display/index.js","components/Overlay/ValueInput/index.js","components/Overlay/index.js","components/App.js","reportWebVitals.js","index.js"],"names":["BingoContext","createContext","BingoProvider","props","storageName","useState","numbers","setNumbers","useEffect","json","localStorage","getItem","savedNumbers","JSON","parse","stringify","setItem","state","insertNumber","number","alreadyExists","forEach","element","prev","removeNumber","filter","el","Provider","value","children","Display","bingoContext","useContext","className","map","i","classNames","onClick","ValueInput","currentInput","setCurrentInput","type","onChange","e","target","Overlay","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAEaA,EAAeC,0BAEfC,EAAgB,SAAAC,GACzB,IAAMC,EAAc,wBADc,EAEJC,mBAAS,IAFL,mBAE3BC,EAF2B,KAElBC,EAFkB,KAKlCC,qBAAU,WACN,IAAMC,EAAOC,aAAaC,QAAQP,GAC5BQ,EAAeC,KAAKC,MAAML,GAC5BG,GACAL,EAAWK,KAEhB,IAGHJ,qBAAU,WACN,IAAMC,EAAOI,KAAKE,UAAUT,GAC5BI,aAAaM,QAAQZ,EAAaK,KACnC,CAACH,IAEJ,IAmBMW,EAAQ,CACVX,QAASA,EACTY,aArBiB,SAAAC,GACjB,IAAIC,GAAgB,EACpBd,EAAQe,SAAQ,SAAAC,GACRA,IAAYH,IACZC,GAAgB,MAIpBA,GAIJb,GAAW,SAAAgB,GAAI,OAAKJ,GAAL,mBAAgBI,QAU/BC,aAPiB,SAAAL,GACjBZ,GAAW,SAAAgB,GAAI,OAAIA,EAAKE,QAAO,SAAAC,GAAE,OAAIA,IAAOP,UAShD,OAAO,cAACnB,EAAa2B,SAAd,CAAuBC,MAAOX,EAA9B,SAAsCd,EAAM0B,YAGxC7B,ICzBA8B,EAvBC,WACZ,IAAMC,EAAeC,qBAAWhC,GAEhC,OACI,qBAAKiC,UAAU,UAAf,SACKF,EAAazB,QAAQ4B,KAAI,SAACf,EAAQgB,GAC/B,IAAIC,EAAa,aAKjB,OAJU,IAAND,IACAC,GAAc,UAId,qBAAaH,UAAWG,EAAYC,QAChC,kBAAMN,EAAaP,aAAaL,IADpC,SAGKA,GAHKgB,SCMfG,EAlBI,WACf,IAAMP,EAAeC,qBAAWhC,GADX,EAEmBK,qBAFnB,mBAEdkC,EAFc,KAEAC,EAFA,KAQrB,OACI,sBAAKP,UAAU,cAAf,UAEI,uBAAOQ,KAAK,SAASC,SAPT,SAAAC,GAChBH,EAAgBG,EAAEC,OAAOhB,UAOrB,wBAAQS,QAAS,kBAAMN,EAAab,aAAaqB,IAAjD,wBCCGM,EAZC,WAEZ,OACI,qBAAKZ,UAAU,UAAf,SACI,eAAC,EAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,UCCDa,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAAC,EAAD,OCMSc,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aae9f1fd.chunk.js","sourcesContent":["import { useState, createContext, useEffect } from 'react';\n\nexport const BingoContext = createContext();\n\nexport const BingoProvider = props => {\n    const storageName = \"numbers-saved-locally\";\n    const [numbers, setNumbers] = useState([]);\n\n    //Load locally\n    useEffect(() => {\n        const json = localStorage.getItem(storageName);\n        const savedNumbers = JSON.parse(json);\n        if (savedNumbers) {\n            setNumbers(savedNumbers);\n        }\n    }, []);\n\n    //Save locally\n    useEffect(() => {\n        const json = JSON.stringify(numbers);\n        localStorage.setItem(storageName, json);\n    }, [numbers]);\n\n    const insertNumber = number => {\n        var alreadyExists = false;\n        numbers.forEach(element => {\n            if (element === number) {\n                alreadyExists = true;\n            }\n        })\n\n        if (alreadyExists) {\n            return;\n        }\n\n        setNumbers(prev => [number, ...prev]);\n    }\n\n    const removeNumber = number => {\n        setNumbers(prev => prev.filter(el => el !== number));\n    }\n\n    const state = {\n        numbers: numbers,\n        insertNumber: insertNumber,\n        removeNumber: removeNumber\n    };\n\n    return <BingoContext.Provider value={state}>{props.children}</BingoContext.Provider>;\n};\n\nexport default BingoContext;\n","import { useContext } from 'react';\nimport BingoContext from '../BingoContext';\n\nconst Display = () => {\n    const bingoContext = useContext(BingoContext);\n\n    return (\n        <div className='display'>\n            {bingoContext.numbers.map((number, i) => {\n                var classNames = 'bingo-ball';\n                if (i === 0) {\n                    classNames += ' first';\n                };\n\n                return (\n                    <div key={i} className={classNames} onClick={\n                        () => bingoContext.removeNumber(number)\n                    }>\n                        {number}\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Display; ","import { useState, useContext } from 'react';\nimport BingoContext from '../BingoContext';\n\nconst ValueInput = () => {\n    const bingoContext = useContext(BingoContext);\n    const [currentInput, setCurrentInput] = useState();\n\n    const updateValue = e => {\n        setCurrentInput(e.target.value);\n    }\n\n    return (\n        <div className=\"value-input\">\n\n            <input type=\"number\" onChange={updateValue} />\n            <button onClick={() => bingoContext.insertNumber(currentInput)}>Insert</button>\n\n        </div>\n    );\n}\n\nexport default ValueInput;","import Display from './Display';\nimport ValueInput from './ValueInput';\nimport { BingoProvider } from './BingoContext'\n\nconst Overlay = () => {\n\n    return (\n        <div className='overlay'>\n            <BingoProvider>\n                <ValueInput />\n                <Display />\n            </BingoProvider>\n        </div>\n    );\n}\n\nexport default Overlay;\n","import './App.css';\nimport Overlay from './Overlay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Overlay />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}