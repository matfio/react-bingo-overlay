{"version":3,"sources":["ultils/index.js","components/Overlay/BingoContext/index.js","components/Overlay/Display/BingoBall/index.js","components/Overlay/Display/index.js","components/Overlay/ValueInput/index.js","components/Overlay/index.js","components/App.js","reportWebVitals.js","index.js"],"names":["darkColors","lightColors","BingoContext","createContext","BingoProvider","props","storageName","useState","balls","setBalls","useEffect","json","localStorage","getItem","savedNumbers","JSON","parse","stringify","setItem","state","insertBall","number","isNaN","alreadyExists","forEach","ball","colors","color1","Math","floor","random","length","color2","console","log","getColorCombination","newBall","backgroundColor","numberColor","prev","removeBall","filter","Provider","value","children","BingoBall","isFirst","handleOnClick","style","color","containerClass","className","onClick","Display","bingoContext","useContext","map","i","ValueInput","currentInput","setCurrentInput","type","onChange","e","target","onKeyPress","charCode","sanitizedInput","parseInt","Overlay","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.461b9419.chunk.js","sourcesContent":["\nexport const HEX2RGB = (hex) => {\n    if (hex.charAt(0) === '#') {\n        hex = hex.substr(1);\n    }\n    if ((hex.length < 2) || (hex.length > 6)) {\n        return false;\n    }\n    var values = hex.split(''),\n        r,\n        g,\n        b;\n\n    if (hex.length === 2) {\n        r = parseInt(values[0].toString() + values[1].toString(), 16);\n        g = r;\n        b = r;\n    } else if (hex.length === 3) {\n        r = parseInt(values[0].toString() + values[0].toString(), 16);\n        g = parseInt(values[1].toString() + values[1].toString(), 16);\n        b = parseInt(values[2].toString() + values[2].toString(), 16);\n    } else if (hex.length === 6) {\n        r = parseInt(values[0].toString() + values[1].toString(), 16);\n        g = parseInt(values[2].toString() + values[3].toString(), 16);\n        b = parseInt(values[4].toString() + values[5].toString(), 16);\n    } else {\n        return false;\n    }\n    return [r, g, b];\n}\n\nexport const euclideonDistance = (v1, v2) => {\n    var i,\n        d = 0;\n\n    for (i = 0; i < v1.length; i++) {\n        d += (v1[i] - v2[i]) * (v1[i] - v2[i]);\n    }\n    return Math.sqrt(d);\n};\n\n\nexport const getRandomColor = (letters, distanceFromGreen) => {\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * letters.length)];\n    }\n\n    if (euclideonDistance(HEX2RGB(color), [0, 255, 0]) <= distanceFromGreen) {\n        color = getRandomColor(letters);\n    }\n\n    return color;\n}\n\nconst darkColors = ['#006EFF','#E96C00','#4F2C5E','#C8922E'];\nconst lightColors = ['#F9E5B4','#C8DDED','#F9F2F2','#EDDCF4'];\nexport const getColorCombination = () => {\n    const color1 = darkColors[Math.floor( Math.random() * darkColors.length)];\n    const color2 = lightColors[ Math.floor(Math.random() * lightColors.length)];\n\n    console.log(Math.random() * darkColors.length)\n    if(Math.random() >= 0.5){\n        return [color1, color2]\n    }\n\n    return [color2, color1]\n}","import { useState, createContext, useEffect } from 'react';\nimport { getColorCombination } from '../../../ultils'\n\nexport const BingoContext = createContext();\n\nexport const BingoProvider = props => {\n    const storageName = \"numbers-saved-locally\";\n    const [balls, setBalls] = useState([]);\n\n    //Load locally\n    useEffect(() => {\n        const json = localStorage.getItem(storageName);\n        const savedNumbers = JSON.parse(json);\n        if (savedNumbers) {\n            setBalls(savedNumbers);\n        }\n    }, []);\n\n    //Save locally\n    useEffect(() => {\n        const json = JSON.stringify(balls);\n        localStorage.setItem(storageName, json);\n    }, [balls]);\n\n    const insertBall = number => {\n        if (isNaN(number)) {\n            return;\n        }\n\n        if (number < 0 || number > 90) {\n            return;\n        }\n\n        var alreadyExists = false;\n        balls.forEach(ball => {\n            if (ball.number === number) {\n                alreadyExists = true;\n            }\n        })\n\n        if (alreadyExists) {\n            return;\n        }\n\n        const colors = getColorCombination();\n\n        const newBall = {\n            number: number,\n            backgroundColor: colors[0],\n            numberColor: colors[1]\n        }\n\n        setBalls(prev => [newBall, ...prev]);\n    }\n\n    const removeBall = number => {\n        setBalls(prev => prev.filter(ball => ball.number !== number));\n    }\n\n    const state = {\n        balls: balls,\n        insertBall: insertBall,\n        removeBall: removeBall\n    };\n\n    return <BingoContext.Provider value={state}>{props.children}</BingoContext.Provider>;\n};\n\nexport default BingoContext;\n","import React from 'react';\n\nconst BingoBall = ({ ball, isFirst, handleOnClick }) => {\n    const style = {\n        backgroundColor: ball.backgroundColor,\n        color: ball.numberColor\n    }\n\n    var containerClass = 'ball-container';\n\n    if (isFirst) {\n        containerClass += ' first';\n    };\n\n    return (\n        <div className={containerClass}>\n            <div style={style} className={'back'}></div>\n            <div\n                key={ball.number}\n                style={style}\n                className={'bingo-ball'}\n                onClick={handleOnClick}\n            >\n                <div className={'text'}>\n                    {ball.number}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default BingoBall;","import React, { useContext } from 'react';\nimport BingoContext from '../BingoContext';\nimport BingoBall from './BingoBall'\n\nconst Display = () => {\n    const bingoContext = useContext(BingoContext);\n\n\n    return (\n        <div className='display'>\n            {bingoContext.balls.map((ball, i) => {\n                const isFirst = i === 0;\n\n                return (\n                    <BingoBall\n                        handleOnClick={() => bingoContext.removeBall(ball.number)}\n                        ball={ball}\n                        isFirst={isFirst} />\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Display; ","import { useState, useContext } from 'react';\nimport BingoContext from '../BingoContext';\n\nconst ValueInput = () => {\n    const bingoContext = useContext(BingoContext);\n    const [currentInput, setCurrentInput] = useState('');\n\n    const updateValue = e => {\n        setCurrentInput(e.target.value);\n    }\n\n    const onKeyPress = e => {\n        if (e.charCode === 13) {\n            const sanitizedInput = parseInt(currentInput, 10);\n\n            bingoContext.insertBall(sanitizedInput);\n            setCurrentInput('');\n        }\n    }\n\n    const onClick = e => {\n        const sanitizedInput = parseInt(currentInput, 10);\n\n        bingoContext.insertBall(sanitizedInput)\n        setCurrentInput('');\n    }\n\n\n    return (\n        <div className=\"value-input\">\n\n            <input\n                value={currentInput}\n                type=\"number\"\n                onChange={updateValue}\n                onKeyPress={onKeyPress}\n            />\n            <button onClick={onClick}>\n                Insert\n            </button>\n\n        </div>\n    );\n}\n\nexport default ValueInput;","import Display from './Display';\nimport ValueInput from './ValueInput';\nimport { BingoProvider } from './BingoContext'\n\nconst Overlay = () => {\n\n    return (\n        <div className='overlay'>\n            <BingoProvider>\n                <ValueInput />\n                <Display />\n            </BingoProvider>\n        </div>\n    );\n}\n\nexport default Overlay;\n","import './App.css';\nimport Overlay from './Overlay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Overlay />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}